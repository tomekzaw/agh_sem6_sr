// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "sr.grpc.gen";
option java_outer_classname = "CalculatorProto";

package calculator;

message ArithmeticOpArguments {
  int32 arg1 = 1;
  int32 arg2 = 2;
}

message ArithmeticOpResult {
  int32 res = 1;
}

message MultiplyArguments {
  repeated int32 numbers = 1;
}

service Calculator {
  rpc Add (ArithmeticOpArguments) returns (ArithmeticOpResult) {}
  rpc Subtract (ArithmeticOpArguments) returns (ArithmeticOpResult) {}
  rpc Multiply (MultiplyArguments) returns (ArithmeticOpResult) {}
}

enum OperationType {
	SUM = 0;
    AVG = 1;
    MIN = 2;
    MAX = 3;
}

message ComplexArithmeticOpArguments {
  OperationType optype = 1;  
  repeated double args = 2;
}

message ComplexArithmeticOpResult {
  double res = 1;
}
     
service AdvancedCalculator {
  rpc ComplexOperation (ComplexArithmeticOpArguments) returns (ComplexArithmeticOpResult) {}
}

