// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gRPC-2020/calculator.proto

package sr.grpc.gen;

/**
 * Protobuf enum {@code calculator.OperationType}
 */
public enum OperationType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SUM = 0;</code>
   */
  SUM(0),
  /**
   * <code>AVG = 1;</code>
   */
  AVG(1),
  /**
   * <code>MIN = 2;</code>
   */
  MIN(2),
  /**
   * <code>MAX = 3;</code>
   */
  MAX(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SUM = 0;</code>
   */
  public static final int SUM_VALUE = 0;
  /**
   * <code>AVG = 1;</code>
   */
  public static final int AVG_VALUE = 1;
  /**
   * <code>MIN = 2;</code>
   */
  public static final int MIN_VALUE = 2;
  /**
   * <code>MAX = 3;</code>
   */
  public static final int MAX_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static OperationType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static OperationType forNumber(int value) {
    switch (value) {
      case 0: return SUM;
      case 1: return AVG;
      case 2: return MIN;
      case 3: return MAX;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<OperationType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      OperationType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<OperationType>() {
          public OperationType findValueByNumber(int number) {
            return OperationType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return sr.grpc.gen.CalculatorProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final OperationType[] VALUES = values();

  public static OperationType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private OperationType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:calculator.OperationType)
}

